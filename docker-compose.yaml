version: "3.9"
services:
  redis:
    image: redis:7-alpine
    command: ["redis-server"]
    volumes:
      - ./data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build: .
    command: ["api"]
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PORT=8000
      - HOST=0.0.0.0
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
      - ./evals:/app/evals
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Server
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - api
      - cadvisor
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      # --- embed + auth ---
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Parsing Worker
  parsing-worker:
    build: .
    command: ["parsing-worker"]
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
      - ./evals:/app/evals
    deploy:
      replicas: 1  # Scale parsing workers as needed

  # Parser Generation Worker
  parser-generation-worker:
    build: .
    command: ["parser-generation-worker"]
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}  # Set this in your .env file
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
      - ./evals:/app/evals
    deploy:
      replicas: 1  # Usually only need one parser generation worker

volumes:
  prometheus_data:
  grafana_data:
